import itertools
import math

def distance(city1, city2):
    # calculate the Euclidean distance between two cities
    return math.sqrt((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)

def tsp(cities):
    # get all possible permutations of cities
    all_tours = list(itertools.permutations(cities))

    # calculate the length of each tour
    tours = [(tour, sum(distance(tour[i], tour[i-1]) for i in range(len(tour)))) for tour in all_tours]

    # return the tour with the shortest length
    return min(tours, key=lambda x: x[1])[0]

# example usage
cities = [(0,0), (1,1), (2,2), (3,3), (4,4), (5,5), (6,6), (7,7)]
print(tsp(cities))
